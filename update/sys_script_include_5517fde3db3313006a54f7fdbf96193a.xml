<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_53373_royalapi.royaleAPIClanExtract</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>royaleAPIClanExtract</name>
        <script><![CDATA[var royaleAPIClanExtract = Class.create();
royaleAPIClanExtract.prototype = {
	initialize: function() {
		this.currentMembers = [];
		this.currentMembers2 = [];
		this.initialGet = false ;
	},
	
	
	get: function(clanTag){
		// Create the clan record
		// Create the clan donation history record
		// Create the clan member donation record
		try {
			// x_53373_royalapi_clan_donations
			var r = new sn_ws.RESTMessageV2('x_53373_royalapi.RoyalAPI', 'Default GET');
			
			var gdt = new GlideDateTime();
			var dayOfWeek = gdt.getDayOfWeekUTC() - 1;
			gdt.addSeconds( -dayOfWeek * 86400);
			weekBeginning = gdt.getValue().split(' ')[0];
			r.setStringParameter('clanTag', clanTag);
			var response = r.execute();
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();
			gs.info('CCK:SI:royaleAPIClanExtract:httpStatus = ' + httpStatus);
			var clanSysID = '';
			if ( httpStatus == '200'){
				this.initialGet = true ;
				var responseJSON = JSON.parse(responseBody);
				var members = responseJSON.members;
				gs.info("CCK:SI:royaleAPIClanExtract: members = " + members.length);
				
				// Create the clan record if needed
				// clan.tag=qwerty^date=weekBeginning
				//var clanTag = responseJSON.tag;
				var clanName = responseJSON.name;
				// Check clan record exists
				var clanGr = new GlideRecord('x_53373_royalapi_clan');
				clanGr.addEncodedQuery('tag=' + clanTag);
				clanGr.query();
				if ( ! clanGr.next()){
					// Create Clan record
					var newClanGr = new GlideRecord('x_53373_royalapi_clan');
					newClanGr.name = clanName;
					newClanGr.tag = clanTag;
					clanSysID = newClanGr.insert();
				} else {
					clanSysID = clanGr.sys_id;
				}
				
				// Update the clan history record
				var clanHistoryGr = new GlideRecord('x_53373_royalapi_clan_history');
				clanHistoryGr.addEncodedQuery('clan.tag=' + clanTag + '^date=' + weekBeginning);
				clanHistoryGr.query();
				if ( clanHistoryGr.next()){
					//update
					clanHistoryGr.donations = responseJSON.donations;
					clanHistoryGr.update();
				} else {
					//insert
					var newClanHistoryGr = new GlideRecord('x_53373_royalapi_clan_history');
					newClanHistoryGr.date = weekBeginning;
					// Get the SysId of the clan
					newClanHistoryGr.clan = clanSysID;
					newClanHistoryGr.donations = responseJSON.donations;
					newClanHistoryGr.insert();
				}
				
				for ( var i = 0 ; i < members.length ; i++ ) {
					
					// Create an array of current members
					this.currentMembers.push("tag!=" + members[i].tag.toString());
					this.currentMembers2.push("name.tag!=" + members[i].tag.toString());
					
					// Create the clan_member record if required
					var clanMemberGr = new GlideRecord('x_53373_royalapi_clan_member');
					clanMemberGr.addEncodedQuery('tag=' + members[i].tag.toString());
					clanMemberGr.query();
					var clanMemberSysId = '';
					if ( clanMemberGr.next() ){
						clanMemberGr.active = true;
						clanMemberGr.clan = clanSysID;
						clanMemberGr.update();
						clanMemberSysId = clanMemberGr.sys_id;
					} else {
						var newClanMemberGr = new GlideRecord('x_53373_royalapi_clan_member');
						newClanMemberGr.name = members[i].name.toString();
						newClanMemberGr.tag = members[i].tag.toString();
						clanMemberGr.clan = clanSysID;
						clanMemberSysId = newClanMemberGr.insert();
					}
					
					// gs.debug('searching for ' + members[i].tag.toString());
					// create the donations record - x_53373_royalapi_clan_donations
					var donationGR = new GlideRecord('x_53373_royalapi_clan_donations');
					//gs.debug("name.name=" + members[i].tag.toString() + "^week_beginning=" + weekBeginning);
					donationGR.addEncodedQuery("name.tag=" + members[i].tag.toString() + "^week_beginning=" + weekBeginning);
					donationGR.query();
					var donationRecSysId = '';
					if ( donationGR.next()){
						donationRecSysId = donationGR.sys_id;
					} else {
						// get the sys id of the member record
						var clanMemberGr2 = new GlideRecord('x_53373_royalapi_clan_member');
						clanMemberGr2.get(clanMemberSysId);
						//gs.debug(clanMemberSysId);
						// Create the new record						
						var newDonationGR = new GlideRecord('x_53373_royalapi_clan_donations');
						newDonationGR.name = clanMemberGr2.sys_id.toString();
						//newDonationGR.tag = members[i].tag.toString();
						donationRecSysId = newDonationGR.insert();
					}
					//gs.debug('donation sys_id = ' + donationRecSysId);
					var donationGR2 = new GlideRecord('x_53373_royalapi_clan_donations');
					donationGR2.get(donationRecSysId);
					donationGR2.name = clanMemberSysId;
					if ( members[i].donations > 0 || members[i].donationsReceived > 0){
						donationGR2.donations = parseInt(members[i].donations);
						donationGR2.donations_received = parseInt(members[i].donationsReceived);
					} else {
						donationGR2.donations = 0;
						donationGR2.donations_received = 0;
					}
					donationGR2.clan_tag = clanSysID;
					donationGR2.week_beginning = weekBeginning;
					donationGR2.update();
				}
			}
		}
		catch(ex) {
			gs.debug(ex.message);
			gs.info("CCK: error = " + ex.message);
		}
		
		//gs.info("CCK: this.currentMembers = " + this.currentMembers + ", this.currentMembers2 = " + this.currentMembers2);
		
	},
	
	getClanWarLog: function(clanTag){
		// Add x_53373_royalapi_clan_war_result record
		// x_53373_royalapi_clan_war_trophies record
		// Get the SysId of the Clan
		var clanSysId = '';
		var clanGr = new GlideRecord('x_53373_royalapi_clan');
		clanGr.addEncodedQuery('tag=' + clanTag);
		clanGr.query();
		if ( clanGr.next() ){
			clanSysId = clanGr.sys_id;
		}
		
		
		gs.debug("CCK: getClanWarLog: start");
		try {
			var r = new sn_ws.RESTMessageV2('x_53373_royalapi.RoyalAPI', 'Warlog GET');
			r.setStringParameter('clanTag', clanTag);
			var response = r.execute();
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();
			gs.debug("CCK: getClanWarLog: " + httpStatus);
			var clanWarLogArray = JSON.parse(responseBody);
			gs.debug('CCK: number of clan wars = ' + clanWarLogArray.length);
			for ( var i = 0 ; i < clanWarLogArray.length ; i++ ){
				//gs.debug(i + ":" + clanWarLogArray[i]);
				var thisJson = clanWarLogArray[i];
				//gs.debug('created date = ' + thisJson.createdDate);
				var thisParticipants = thisJson.participants;
				
				// convert createdDate
				var clanWarDate = new GlideDateTime();
				clanWarDate.setValue("1970-01-01 00:00:00");
				clanWarDate.addSeconds(thisJson.createdDate);
				
				for ( var j = 0 ; j < thisParticipants.length ; j++) {
					var partipantsJson = thisParticipants[j];
					var member = new GlideRecord('x_53373_royalapi_clan_member');
					member.addEncodedQuery('name=' + partipantsJson.name);
					member.query();
					if ( member.next()){
						//gs.debug("CCK: 1. member.syd_id = " + member.sys_id);
						var clanWarLogGr = new GlideRecord('x_53373_royalapi_clan_war_result');
						clanWarLogGr.addQuery('created_date', thisJson.createdDate);
						//name.tag=2LYGQ2QG
						clanWarLogGr.addEncodedQuery('name.tag=' + partipantsJson.tag);
						gs.debug('name.tag=' + partipantsJson.tag);
						clanWarLogGr.query();

						if ( clanWarLogGr.next()){
							clanWarLogGr.name = member.sys_id;
							clanWarLogGr.cards_earned = partipantsJson.cardsEarned;
							clanWarLogGr.battles_played = partipantsJson.battlesPlayed;
							clanWarLogGr.wins = partipantsJson.wins;
							clanWarLogGr.clan_war_date = clanWarDate ;
							clanWarLogGr.clan = clanSysId;
							clanWarLogGr.update();
						} else {
							// create the record
							clanWarLogGr.created_date = thisJson.createdDate;
							//clanWarLogGr.tag = partipantsJson.tag;
							//gs.debug("CCK: 2. member.syd_id = " + member.sys_id);
							clanWarLogGr.name = member.sys_id;
							clanWarLogGr.cards_earned = partipantsJson.cardsEarned;
							clanWarLogGr.battles_played = partipantsJson.battlesPlayed;
							clanWarLogGr.wins = partipantsJson.wins;
							clanWarLogGr.clan_war_date = clanWarDate ;
							clanWarLogGr.clan = clanSysId ;
							clanWarLogGr.insert();
						}
					}
				}
				// Get clan standings
				var thisStandings = thisJson.standings;
				for ( var k = 0 ; k < thisStandings.length ; k++){
					var competingClan = thisStandings[k];
					if ( competingClan.tag == 'V2GCC8Y'){
						var clanWarTrophies = new GlideRecord('x_53373_royalapi_clan_war_trophies');
						clanWarTrophies.addQuery('clan_war_date',clanWarDate);
						clanWarTrophies.addQuery('clan',clanSysId);
						clanWarTrophies.query();
						if ( ! clanWarTrophies.next() ){
							var addClanWarTrophiesGr = new GlideRecord('x_53373_royalapi_clan_war_trophies');
							addClanWarTrophiesGr.clan_war_date = clanWarDate;
							addClanWarTrophiesGr.clan = clanSysId;
							addClanWarTrophiesGr.clan_tag = 'V2GCC8Y';
							addClanWarTrophiesGr.position = (k+1);
							addClanWarTrophiesGr.trophies = thisStandings[k].warTrophies;
							addClanWarTrophiesGr.trophy_change = thisStandings[k].warTrophiesChange;
							addClanWarTrophiesGr.insert();
						}
						break;
					}
				}
			}
		}
		catch(ex) {
			var message = ex.message;
			gs.debug("CCK: error in getClanWarLog: " + message);
		}
	},
	
	deactivateOldMembers: function(clanTag){
		if ( this.initialGet == true ) {
			var memberGR = new GlideRecord('x_53373_royalapi_clan_member');
			memberGR.addEncodedQuery(this.currentMembers.join("^") + "^clan.tag=" + clanTag);
			memberGR.query();
			memberGR.active = false;
			memberGR.updateMultiple();
		}
	},
	
	
	type: 'royaleAPIClanExtract'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>chikwong.cheung</sys_created_by>
        <sys_created_on>2018-08-14 14:00:10</sys_created_on>
        <sys_id>5517fde3db3313006a54f7fdbf96193a</sys_id>
        <sys_mod_count>137</sys_mod_count>
        <sys_name>royaleAPIClanExtract</sys_name>
        <sys_package display_value="RoyalAPI" source="x_53373_royalapi">6cb47d63db3313006a54f7fdbf9619c5</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="RoyalAPI">6cb47d63db3313006a54f7fdbf9619c5</sys_scope>
        <sys_update_name>sys_script_include_5517fde3db3313006a54f7fdbf96193a</sys_update_name>
        <sys_updated_by>chikwong.cheung</sys_updated_by>
        <sys_updated_on>2019-02-08 11:42:27</sys_updated_on>
    </sys_script_include>
</record_update>
